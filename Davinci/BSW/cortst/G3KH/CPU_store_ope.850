---------------------------------------------------------------------------------
-- Project      = G3M/G3KH SW CST                                              --
-- Module       = CPU_store_ope.850                                            --
-- Version      = 1.2.4                                                        --
-- Date         = 10-11-2017                                                   --
---------------------------------------------------------------------------------
--                                  COPYRIGHT                                  --
---------------------------------------------------------------------------------
-- Copyright (c) 2014-2017 by Renesas Electronics Corporation                  --
---------------------------------------------------------------------------------
-- Purpose:                                                                    --
--   RH850G3M/RH850G3KH CORE SELF TEST                                         --
--   Store instructions / Register file                                        --
---------------------------------------------------------------------------------
--                                                                             --
-- Unless otherwise agreed upon in writing between your company and            --
-- Renesas Electronics Corporation the following shall apply!                  --
--                                                                             --
-- Warranty Disclaimer                                                         --
--                                                                             --
-- There is no warranty of any kind whatsoever granted by Renesas. Any         --
-- warranty is expressly disclaimed and excluded by Renesas, either expressed  --
-- or implied, including but not limited to those for non-infringement of      --
-- intellectual property, merchantability and/or fitness for the particular    --
-- purpose.                                                                    --
--                                                                             --
-- Renesas shall not have any obligation to maintain, service or provide bug   --
-- fixes for the supplied Product(s) and/or the Application.                   --
--                                                                             --
-- Each User is solely responsible for determining the appropriateness of      --
-- using the Product(s) and assumes all risks associated with its exercise     --
-- of rights under this Agreement, including, but not limited to the risks     --
-- and costs of program errors, compliance with applicable laws, damage to     --
-- or loss of data, programs or equipment, and unavailability or               --
-- interruption of operations.                                                 --
--                                                                             --
-- Limitation of Liability                                                     --
--                                                                             --
-- In no event shall Renesas be liable to the User for any incidental,         --
-- consequential, indirect, or punitive damage (including but not limited      --
-- to lost profits) regardless of whether such liability is based on breach    --
-- of contract, tort, strict liability, breach of warranties, failure of       --
-- essential purpose or otherwise and even if advised of the possibility of    --
-- such damages. Renesas shall not be liable for any services or products      --
-- provided by third party vendors, developers or consultants identified or    --
-- referred to the User by Renesas in connection with the Product(s) and/or    --
-- the Application.                                                            --
--                                                                             --
---------------------------------------------------------------------------------
-- Environment:                                                                --
--              Devices:  G3M/G3KH                                             --
--              Language: Green Hills Software, Compiler v2015.1.7             --
---------------------------------------------------------------------------------

#include        "CST_common.inc"
#include        "CST_if.h"

------------------------------------------------------------------------------
--	Defined Symbol
------------------------------------------------------------------------------
	.GLOBL		_CST_CPU_store_1
	.GLOBL		_CST_CPU_store_2

	.EXTERN		f_sub_CST_push_psw
	.EXTERN		f_sub_CST_pop_psw

	.SET		STORE_CST_DISP23	0x100000
	.SET		STORE_LOOP_CNT		0x04		-- None misalign is set '1'

------------------------------------------------------------------------------
--  Function Name   : _CST_CPU_store_1
--  Function ID     : CST_FN_051
--  Input           : none
--  Output          : R10 : Result SUM
--  Broken Register : R6, R7, R8, R9, R10, R11, R12, R13, R14, (R28, R29, EP, LP)
------------------------------------------------------------------------------
	.SECTION	".text", .text
	.ALIGN		4

_CST_CPU_store_1:
	-- Covers: CST_DD_072
	-- Covers: CST_DD_319
	-- Covers: CST_DD_217
	--------------------------------------------------
	--	Push General Registers
	--------------------------------------------------
#if CST_MA_HW_OPERATION
	PREPARE		{R28-LP}, 0x08, SP		--
-- CST_MA_HW_OPERATION
#else
	PREPARE		{EP-LP}, 0x08, SP		--
-- CST_MA_HW_OPERATION
#endif

	--------------------------------------------------
	--	Start of Test
	--------------------------------------------------
	MOV		R0, R10				--
	ADD		0x04, EP			--
	MOV		EP, R11				--

	--------------------------------------------------
	--	Initialized of Test Pattern Data
	--------------------------------------------------
	MOV		STORE_CST_DISP23, R7		--
	MOV		STORE_CST_DISP23, R6		--
	SUBR		EP, R7				--
	ADD		EP, R6				--

	MOV		0x55AA00FF, R8			--
	NOT		R8, R9				--
	MOV		STORE_LOOP_CNT, LP		--

    CPU_store_1_001:

#if CST_MA_HW_OPERATION
	--------------------------------------------------
	--	Push System Registers
	--------------------------------------------------
	-- Covers: CST_UM_006
#if CST_INT_EN
	STSR		PSW, R29, 0			--
	MOV		0xFFFFFFDF, R28			--
	OR		R29, R28			-- all 1 except PSW.ID bit
	DI						--
	STSR		PSW, R29, 0			--
	AND		R28, R29			--
-- CST_INT_EN
#else
	DI						--
	STSR		PSW, R29, 0			--
-- CST_INT_EN
#endif
	STSR		MCTL, R28, 1			--
	MOV		MCTL_MA_BIT, R12		--
	OR		R28, R12			--
	-- Covers: CST_UM_025
	LDSR		R12, MCTL, 1			--
	NOP						--
-- CST_MA_HW_OPERATION
#endif

	-- Covers: CST_UM_310
	-- Covers: CST_UM_310_02
	--------------------------------------------------
	--	ST.W reg3, disp23[reg1]
	--------------------------------------------------
	ST.W		R9, STORE_CST_DISP23[R7]	--cst_point: in=1
	SLD.W		0x00[EP], R13			--
	XOR		R9, R13				--
	ADD		R13, R10			--

	-- Covers: CST_UM_310
	-- Covers: CST_UM_310_01
	--------------------------------------------------
	--	ST.W reg2, disp16[reg1]
	--------------------------------------------------
	ST.W		R8, -0x0004[EP]			--cst_point: in=1
	LD.W		-0x0004[EP], R14		--
	XOR		R8, R14				--
	ADD		R14, R10			--

	-- Covers: CST_UM_306
	-- Covers: CST_UM_306_01
	--------------------------------------------------
	--	SST.W reg2, disp8[EP]
	--------------------------------------------------
	SST.W		R9, 0x04[EP]			--cst_point: in=1
	SLD.W		0x04[EP], R12			--
	XOR		R9, R12				--
	ADD		R12, R10			--

	-- Covers: CST_UM_307
	-- Covers: CST_UM_307_02
	--------------------------------------------------
	--	ST.B reg3, disp23[reg1]
	--------------------------------------------------
	ST.B		R9, -STORE_CST_DISP23[R6]	--cst_point: in=1
	LD.BU		0x0000[EP], R13			--
	XOR		R9, R13				--
	ADD		R13, R10			--

	-- Covers: CST_UM_307
	-- Covers: CST_UM_307_01
	--------------------------------------------------
	--	ST.B reg2, disp16[reg1]
	--------------------------------------------------
	ST.B		R8, -0x0004[EP]			--cst_point: in=1
	LD.BU		-0x0004[EP], R14		--
	XOR		R8, R14				--
	ADD		R14, R10			--

	-- Covers: CST_UM_304
	-- Covers: CST_UM_304_01
	--------------------------------------------------
	--	SST.B reg2, disp7[EP]
	--------------------------------------------------
	SST.B		R9, 0x04[EP]			--cst_point: in=1
	SLD.BU		0x4[EP], R12			--
	XOR		R9, R12				--
	ADD		R12, R10			--

	-- Covers: CST_UM_309
	-- Covers: CST_UM_309_02
	--------------------------------------------------
	--	ST.H reg3, disp23[reg1]
	--------------------------------------------------
	ST.H		R8, -STORE_CST_DISP23[R6]	--cst_point: in=1
	LD.HU		0x0000[EP], R13			--
	XOR		R8, R13				--
	ADD		R13, R10			--

	-- Covers: CST_UM_309
	-- Covers: CST_UM_309_01
	--------------------------------------------------
	--	ST.H reg2, disp16[reg1]
	--------------------------------------------------
	ST.H		R9, -0x0004[EP]			--cst_point: in=1
	LD.HU		-0x0004[EP], R14		--
	XOR		R9, R14				--
	ADD		R14, R10			--

	-- Covers: CST_UM_305
	-- Covers: CST_UM_305_01
	--------------------------------------------------
	--	SST.H reg2, disp8[EP]
	--------------------------------------------------
	SST.H		R8, 0x04[EP]			--cst_point: in=1
	SLD.HU		0x04[EP], R12			--
	XOR		R8, R12				--
	ADD		R12, R10			--

#if CST_MA_HW_OPERATION
	--------------------------------------------------
	--	Pop System Registers
	--------------------------------------------------
	LDSR		R28, MCTL, 1			--
	LDSR		R29, PSW, 0			--

	--------------------------------------------------
	--	Judge of Test End
	--------------------------------------------------
	ADD		0x01, EP			--
	ADD		0x01, R6			--
	ADD		0x01, R7			--
	LOOP		LP, CPU_store_1_001		--
-- CST_MA_HW_OPERATION
#else
	--------------------------------------------------
	--	Judge of Test End
	--------------------------------------------------
	ADD		0x04, EP			--
	ADD		0x04, R6			--
	ADD		0x04, R7			--
	LOOP		LP, CPU_store_1_001		--
-- CST_MA_HW_OPERATION
#endif

	MOV		STORE_LOOP_CNT, LP		--
	MOV		STORE_CST_DISP23, R7		--
	MOV		STORE_CST_DISP23, R6		--
	SUBR		R11, R7				--
	ADD		R11, R6				--

    CPU_store_1_002:
	-- Covers: CST_UM_308
	-- Covers: CST_UM_308_01
	--------------------------------------------------
	--	ST.DW reg3, disp23[reg1]
	--------------------------------------------------
	ST.DW		R8, -(STORE_CST_DISP23 + 0x04)[R6]	--cst_point: in=1
	LD.DW		-0x000004[R11], R12		--
	XOR		R8, R12				--
	ADD		R12, R10			--
	XOR		R9, R13				--
	ADD		R13, R10			--

	--------------------------------------------------
	--	ST.DW reg3, disp23[reg1]
	--------------------------------------------------
	ST.DW		R8, (STORE_CST_DISP23 + 0x04)[R7]	--cst_point: in=1
	LD.DW		0x000004[R11], R12		--
	XOR		R8, R12				--
	ADD		R12, R10			--
	XOR		R9, R13				--
	ADD		R13, R10			--

	--------------------------------------------------
	--	Judge of Test End
	--------------------------------------------------
	ADD		0x04, R11			--
	ADD		0x04, R6			--
	ADD		0x04, R7			--
	LOOP		LP, CPU_store_1_002		--

	--------------------------------------------------
	--	Pop General Registers
	--------------------------------------------------
#if CST_MA_HW_OPERATION
	DISPOSE		0x08, {R28-LP}, [LP]		--
-- CST_MA_HW_OPERATION
#else
	DISPOSE		0x08, {EP-LP}, [LP]		--
-- CST_MA_HW_OPERATION
#endif


------------------------------------------------------------------------------
--  Function Name   : _CST_CPU_store_2
--  Function ID     : CST_FN_052
--  Input           : none
--  Output          : R10 : Result SUM
--  Broken Register : R1, (R2, R4-R5), R6-R14, (R15-R24, R25-R29, EP, LP)
------------------------------------------------------------------------------
	.SECTION	".text", .text
	.ALIGN		4

_CST_CPU_store_2:
	-- Covers: CST_DD_073
	-- Covers: CST_DD_218
	--------------------------------------------------
	--	Push General Registers
	--------------------------------------------------
	PREPARE		{R25-LP}, 0x03, SP		--
	ADDI		0x0008, EP, R29			--
	JARL		f_sub_CST_push_psw, LP		--

	PUSHSP		R2-R5				--
	PUSHSP		R15-R24				--

	--------------------------------------------------
	--	Start of Test
	--------------------------------------------------
	MOV		R0, R10				--

	--------------------------------------------------
	--	Initialized of Test Pattern Data
	--------------------------------------------------
	MOV		0x55555555, R1			--
	MOV		0xAAAAAAAA, R2			--
	MOV		0x55555555, R4			--
	MOV		0xAAAAAAAA, R5			--
	MOV		0x55555555, R6			--
	MOV		0xAAAAAAAA, R7			--
	MOV		0x55555555, R8			--
	MOV		0xAAAAAAAA, R9			--
	MOV		0x55555555, R11			--
	MOV		0xAAAAAAAA, R12			--
	MOV		0x55555555, R13			--
	MOV		0xAAAAAAAA, R14			--
	MOV		0x55555555, R15			--
	MOV		0xAAAAAAAA, R16			--
	MOV		0x55555555, R17			--
	MOV		0xAAAAAAAA, R18			--
	MOV		0x55555555, R19			--
	MOV		0xAAAAAAAA, R20			--
	MOV		0x55555555, R21			--
	MOV		0xAAAAAAAA, R22			--
	MOV		0x55555555, R23			--
	MOV		0xAAAAAAAA, R24			--
	MOV		0x55555555, R25			--
	MOV		0xAAAAAAAA, R26			--
	MOV		0x55555555, R27			--
	MOV		0xAAAAAAAA, R28			--
	MOV		0x55555555, R29			--
	MOV		0xAAAAAAAA, LP			--

    CPU_store_2_001:
	-- Covers: CST_UM_306
	-- Covers: CST_UM_306_01
	--------------------------------------------------
	--	SST.W reg2, disp8[EP]
	--------------------------------------------------
	SST.W		R1, 0x00[EP]			--
	SST.W		R2, 0x00[EP]			--cst_point: in=1
	SLD.W		0x00[EP], R1			--
	ADD		R1, R10				--

	SST.W		R4, 0x00[EP]			--
	SST.W		R5, 0x00[EP]			--cst_point: in=1
	SLD.W		0x00[EP], R4			--
	ADD		R4, R10				--

	SST.W		R6, 0x00[EP]			--
	SST.W		R7, 0x00[EP]			--cst_point: in=1
	SLD.W		0x00[EP], R6			--
	ADD		R6, R10				--

	SST.W		R8, 0x00[EP]			--
	SST.W		R9, 0x00[EP]			--cst_point: in=1
	SLD.W		0x00[EP], R8			--
	ADD		R8, R10				--

	SST.W		R11, 0x00[EP]			--
	SST.W		R12, 0x00[EP]			--cst_point: in=1
	SLD.W		0x00[EP], R11			--
	ADD		R11, R10			--

	SST.W		R13, 0x00[EP]			--
	SST.W		R14, 0x00[EP]			--cst_point: in=1
	SLD.W		0x00[EP], R13			--
	ADD		R13, R10			--

	SST.W		R15, 0x00[EP]			--
	SST.W		R16, 0x00[EP]			--cst_point: in=1
	SLD.W		0x00[EP], R15			--
	ADD		R15, R10			--

	SST.W		R17, 0x00[EP]			--
	SST.W		R18, 0x00[EP]			--cst_point: in=1
	SLD.W		0x00[EP], R17			--
	ADD		R17, R10			--

	SST.W		R19, 0x00[EP]			--
	SST.W		R20, 0x00[EP]			--cst_point: in=1
	SLD.W		0x00[EP], R19			--
	ADD		R19, R10			--

	SST.W		R21, 0x00[EP]			--
	SST.W		R22, 0x00[EP]			--cst_point: in=1
	SLD.W		0x00[EP], R21			--
	ADD		R21, R10			--

	SST.W		R23, 0x00[EP]			--
	SST.W		R24, 0x00[EP]			--cst_point: in=1
	SLD.W		0x00[EP], R23			--
	ADD		R23, R10			--

	SST.W		R25, 0x00[EP]			--
	SST.W		R26, 0x00[EP]			--cst_point: in=1
	SLD.W		0x00[EP], R25			--
	ADD		R25, R10			--

	SST.W		R27, 0x00[EP]			--
	SST.W		R28, 0x00[EP]			--cst_point: in=1
	SLD.W		0x00[EP], R27			--
	ADD		R27, R10			--

	SST.W		R29, 0x00[EP]			--
	SST.W		LP, 0x00[EP]			--cst_point: in=1
	SLD.W		0x00[EP], R29			--
	ADD		R29, R10			--

	--------------------------------------------------
	--     Next Setting TEST data                   --
	--------------------------------------------------
	NOT		R2, R2				--
	NOT		R5, R5				--
	NOT		R7, R7				--
	NOT		R9, R9				--
	NOT		R12, R12			--
	NOT		R14, R14			--
	NOT		R16, R16			--
	NOT		R18, R18			--
	NOT		R20, R20			--
	NOT		R22, R22			--
	NOT		R24, R24			--
	NOT		R26, R26			--
	NOT		R28, R28			--
	NOT		LP, LP				--

	--------------------------------------------------
	--	Judge of Test End
	--------------------------------------------------
	ADD		0x04, EP			--
	CMP		LP, R0				--
	BN		CPU_store_2_001			--

	--------------------------------------------------
	--	Pop General Registers
	--------------------------------------------------
	POPSP		R15-R24				--
	POPSP		R2-R5				--

	MOV		EP, R29				--
	JARL		f_sub_CST_pop_psw, LP		--
	DISPOSE		0x03, {R25-LP}, [LP]		--


-- ============================================================================
-- =====        E n d   o f   F i l e   :   CPU_store_ope.850             =====
-- ============================================================================
