#!/bin/sh
# From Gerrit Code Review 3.1.2
#
# Part of Gerrit Code Review (https://www.gerritcodereview.com/)
#
# Copyright (C) 2009 The Android Open Source Project
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

JIRA_LINK="http://10.52.245.102:8080/rest/api/latest/issue"
ACCOUNT="nobo_readonly:nobo123.com"

COMMIT_MSG=`cat $1`

PRINT_PROMPT_INFO (){
    echo -e "\033[31m[ERROR] Please follow the format 'JIRA_ID [MODULE]<DESCRIPTION>' and details in http://10.52.245.102:8090/display/INTT/Commit+Message+Rules\033[0m"
    echo -e "\033[31m[ERROR] Please re-commit by 'git commit --amend' after correcting commit message!\n\033[0m"
}

#Check if Commit Message begins with Specific KEY Words
KEYWORD=$(echo "$COMMIT_MSG" | grep -Eo "^(Merge | Revert )")

if [ -n "$KEYWORD" ]; then
    echo -e "\033[32m[INFO] This is a ${KEYWORD}commit, pass validation\033[0m"

else
    START=$(echo "$COMMIT_MSG" | grep -Eo "^([A-Z][A-Z0-9]+-[0-9]+) ")

    if [ -z "$START" ]; then
        echo -e "\033[31m[ERROR] Your commit message must begin with a valid JIRA ID\033[0m"
        PRINT_PROMPT_INFO
        exit 1
    else
        DEFECT=$(echo "$START" | cut -d' ' -f 1)
        HTTP_CODE=$(curl -I -s --user ${ACCOUNT} ${JIRA_LINK}/${DEFECT} -w %{HTTP_CODE})
        if [ "${HTTP_CODE:9:3}" == "200" ]; then
            echo -e "\033[32m[INFO] Jira Issue ${DEFECT} exists\n\033[0m"
            MODULE=$(echo "$COMMIT_MSG" | grep -Eo "^([A-Z][A-Z0-9]+-[0-9]+) \[(IVI|AUDIO|INFRA|VIP|BSP|CLUSTER|CI)\]")
            if [ -z "$MODULE" ]; then
                echo -e "\033[31m[ERROR] MODULE must be selected from [IVI|AUDIO|INFRA|VIP|BSP|CLUSTER|CI] and must be included in a pair of square brackets'[]'!\033[0m"
                PRINT_PROMPT_INFO
                exit 1
            else
                #SUBJECT=$(echo "$COMMIT_MSG" | grep -Eo "^([A-Z][A-Z0-9]+-[0-9]+) \[(IVI|AUDIO|INFRA|VIP|BSP|CLUSTER|CI)\]\s*\S.{5,}")
                SUBJECT=$(echo "$COMMIT_MSG" | cut -d']' -f 2)
                if [ ${#SUBJECT} -lt 5 ]; then
                    echo -e "\033[31m[ERROR] SBUJECT must be more than 5 charactors!\033[0m"
                    PRINT_PROMPT_INFO
                    exit 1
                fi
            fi
        else
            echo -e "\033[31m[ERROR] Jira Issue ${DEFECT} doesn't exist. Please provide a valid Jira ID!\033[0m"
            PRINT_PROMPT_INFO
            exit 1
        fi
    fi
fi


# avoid [[ which is not POSIX sh.
if test "$#" != 1 ; then
  echo "$0 requires an argument."
  exit 1
fi

if test ! -f "$1" ; then
  echo "file does not exist: $1"
  exit 1
fi

# Do not create a change id if requested
if test "false" = "`git config --bool --get gerrit.createChangeId`" ; then
  exit 0
fi

# $RANDOM will be undefined if not using bash, so don't use set -u
random=$( (whoami ; hostname ; date; cat $1 ; echo $RANDOM) | git hash-object --stdin)
dest="$1.tmp.${random}"

trap 'rm -f "${dest}"' EXIT

if ! git stripspace --strip-comments < "$1" > "${dest}" ; then
   echo "cannot strip comments from $1"
   exit 1
fi

if test ! -s "${dest}" ; then
  echo "file is empty: $1"
  exit 1
fi

# Avoid the --in-place option which only appeared in Git 2.8
# Avoid the --if-exists option which only appeared in Git 2.15
if ! git -c trailer.ifexists=doNothing interpret-trailers \
      --trailer "Change-Id: I${random}" < "$1" > "${dest}" ; then
  echo "cannot insert change-id line in $1"
  exit 1
fi

if ! mv "${dest}" "$1" ; then
  echo "cannot mv ${dest} to $1"
  exit 1
fi
